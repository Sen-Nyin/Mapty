(()=>{"use strict";class t{date=new Date;id=`${Date.now()}`.slice(-10);constructor(t,e,s){this.coords=t,this.distance=e,this.duration=s}_setDescription(){this.description=`${this.type[0].toUpperCase()}${this.type.slice(1)} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}}class e extends t{type="running";constructor(t,e,s,o){super(t,e,s),this.cadence=o,this.calcPace(),this._setDescription()}calcPace(){this.pace=this.duration/this.distance}}class s extends t{type="cycling";constructor(t,e,s,o){super(t,e,s),this.elevationGain=o,this.calcSpeed(),this._setDescription()}calcSpeed(){this.speed=this.distance/(this.duration/60)}}class o{static getEle(t){return document.querySelector(t)}static create(...t){const[e,...s]=t,o=document.createElement(e);return s.forEach((t=>o.classList.add(t))),o}#t;#e=13;#s;#o=JSON.parse(localStorage.getItem("workouts"))||[];constructor(){this.form=o.getEle(".form"),this.containerWorkouts=o.getEle(".workouts"),this.inputType=o.getEle(".form__input--type"),this.inputDistance=o.getEle(".form__input--distance"),this.inputDuration=o.getEle(".form__input--duration"),this.inputCadence=o.getEle(".form__input--cadence"),this.inputElevation=o.getEle(".form__input--elevation"),this.form.addEventListener("submit",this._newWorkout.bind(this)),this.inputType.addEventListener("change",this._toggleElevationField.bind(this)),this._getPosition(),this.containerWorkouts.addEventListener("click",this._moveToPopup.bind(this))}_getPosition(){navigator.geolocation.getCurrentPosition(this._geoSuccess.bind(this),this._geoError)}_moveToPopup(t){const e=t.target.closest(".workout");if(!e)return;const s=this.#o.find((t=>t.id===e.dataset.id));this.#t.setView(s.coords,this.#e,{animate:!0,pan:{duration:1}})}_showForm(t){this.#s=t,this.form.classList.remove("hidden"),this.inputDistance.focus()}_hideForm(){this.form.style.display="none",this.form.classList.add("hidden"),setTimeout((()=>{this.form.style.display="grid"}),1e3),this.form.reset()}_toggleElevationField(){this.inputCadence.closest(".form__row").classList.toggle("form__row--hidden"),this.inputElevation.closest(".form__row").classList.toggle("form__row--hidden")}_newWorkout(t){t.preventDefault();const o=this.inputType.value,i=+this.inputDistance.value,n=+this.inputDuration.value,r="running"===o?+this.inputCadence.value:+this.inputElevation.value,a=(...t)=>t.every((t=>t>0));if(!((...t)=>t.every((t=>Number.isFinite(t))))(i,n,r)||"running"===o&&!a(i,n,r)||"cycling"===o&&!a(i,n))return alert("Inputs must be positive numbers");const u=this._getCoords(),c="running"===o?new e(u,i,n,r):new s(u,i,n,r);this.#o.push(c),this._renderMarker(c),this._renderWorkout(c),this._hideForm(),this._storeWorkouts()}_geoSuccess(t){const{latitude:e}=t.coords,{longitude:s}=t.coords,o=[e,s];this.#t=L.map("map").setView(o,this.#e),this._loadMap(),this._handleClicks()}_geoError=()=>alert("Could not get your location");_loadMap(){L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.#t),this._loadWorkouts()}_handleClicks=()=>this.#t.on("click",this._showForm.bind(this));_getCoords=()=>Object.values(this.#s.latlng);_renderMarker(t){L.marker(t.coords).addTo(this.#t).bindPopup(L.popup({maxWidth:250,minWIdth:100,autoClose:!1,closeOnClick:!1,className:`${t.type}-popup`})).setPopupContent(`${"running"===t.type?"🏃🏻‍♂️":"🚴‍♀️"} ${t.description}`).openPopup()}_renderWorkout(t){const e=`\n      <li class="workout workout--${t.type}" data-id="${t.id}">\n        <h2 class="workout__title">${t.description}</h2>\n\n        <div class="workout__details">\n          <span class="workout__icon">${"running"===t.type?"🏃🏻‍♂️":"🚴‍♀️"}</span>\n          <span class="workout__value">${t.distance}</span>\n          <span class="workout__unit">km</span>\n        </div>\n\n        <div class="workout__details">\n          <span class="workout__icon">⏱</span>\n          <span class="workout__value">${t.duration}</span>\n          <span class="workout__unit">min</span>\n        </div>\n\n        <div class="workout__details">\n          <span class="workout__icon">⚡️</span>\n          <span class="workout__value">${"running"===t.type?t.pace.toFixed(1):t.speed.toFixed(1)}</span>\n          <span class="workout__unit">${"running"===t.type?"min/km":"km/h"}</span>\n        </div>\n\n        <div class="workout__details">\n          <span class="workout__icon">${"running"===t.type?"🦶":"🏔"}</span>\n          <span class="workout__value">${"running"===t.type?t.cadence:t.elevationGain}</span>\n          <span class="workout__unit">${"running"===t.type?"spm":"m"}</span>\n        </div>\n      </li>\n    `;this.form.insertAdjacentHTML("afterend",e)}_storeWorkouts(){localStorage.setItem("workouts",JSON.stringify(this.#o))}_loadWorkouts(){this.#o.length&&this.#o.forEach((t=>{this._renderWorkout(t),this._renderMarker(t)}))}clearWorkouts(){localStorage.removeItem("workouts"),location.reload()}}new o})();